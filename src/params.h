#ifndef __PARAMS__
#define __PARAMS__

#include "cryptopp/integer.h"
#include "cryptopp/modarith.h"
#ifdef CURVE1
    #define CURVENAME "CURVE1"
    CryptoPP::Integer p 			= CryptoPP::Integer("57896044618658097711785492504343953926634992332820282019728792003956564821041");
    CryptoPP::Integer a 			= CryptoPP::Integer("7");
    CryptoPP::Integer b 		    = CryptoPP::Integer("43308876546767276905765904595650931995942111794451039583252968842033849580414");
    CryptoPP::Integer pX 			= 2;
    CryptoPP::Integer pY 			= CryptoPP::Integer("4018974056539037503335449422937059775635739389905545080690979365213431566280");
    CryptoPP::Integer Q 			= CryptoPP::Integer("57896044618658097711785492504343953927082934583725450622380973592137631069619");
#elif CURVE2
    #define CURVENAME "CURVE2" 
    CryptoPP::Integer p 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001");
    CryptoPP::Integer a 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE");
    CryptoPP::Integer b 		    = CryptoPP::Integer("0xB4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4");
    CryptoPP::Integer pX 			= CryptoPP::Integer("0xB70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21");
    CryptoPP::Integer pY 			= CryptoPP::Integer("0xBD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34");
    CryptoPP::Integer Q 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D");
#elif CURVE3
    #define CURVENAME "CURVE3" 
    CryptoPP::Integer p 			= CryptoPP::Integer("0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF");
    CryptoPP::Integer a 			= CryptoPP::Integer("0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC");
    CryptoPP::Integer b 		    = CryptoPP::Integer("0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B");
    CryptoPP::Integer pX 			= CryptoPP::Integer("0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296");
    CryptoPP::Integer pY 			= CryptoPP::Integer("0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5");
    CryptoPP::Integer Q 			= CryptoPP::Integer("0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551");
#elif CURVE4
    #define CURVENAME "CURVE4" 
    CryptoPP::Integer p 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF");
    CryptoPP::Integer a 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC");
    CryptoPP::Integer b 		    = CryptoPP::Integer("0xB3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF");
    CryptoPP::Integer pX 			= CryptoPP::Integer("0xAA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7");
    CryptoPP::Integer pY 			= CryptoPP::Integer("0x3617DE4A96262C6F5D9E98BF9292DC29F8F41DBD289A147CE9DA3113B5F0B8C00A60B1CE1D7E819D7A431D7C90EA0E5F");
    CryptoPP::Integer Q 			= CryptoPP::Integer("0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973");
#else
    #define CURVENAME "Default Curve1" 
    CryptoPP::Integer p 			= CryptoPP::Integer("57896044618658097711785492504343953926634992332820282019728792003956564821041");
    CryptoPP::Integer a 			= CryptoPP::Integer("7");
    CryptoPP::Integer b 		    = CryptoPP::Integer("43308876546767276905765904595650931995942111794451039583252968842033849580414");
    CryptoPP::Integer pX 			= 2;
    CryptoPP::Integer pY 			= CryptoPP::Integer("4018974056539037503335449422937059775635739389905545080690979365213431566280");
    CryptoPP::Integer Q 			= CryptoPP::Integer("57896044618658097711785492504343953927082934583725450622380973592137631069619");
#endif
CryptoPP::ModularArithmetic MOD = CryptoPP::ModularArithmetic(p); 
CryptoPP::ModularArithmetic MODQ = CryptoPP::ModularArithmetic(Q); 
#endif